{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport { Asset } from 'expo-asset';\nexport default function useCachedResources(images, fonts) {\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isLoadingComplete = _React$useState2[0],\n    setLoadingComplete = _React$useState2[1];\n\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _regeneratorRuntime.async(function loadResourcesAndDataAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Promise.all([images && Asset.loadAsync(images), Font.loadAsync(_objectSpread(_objectSpread({}, Ionicons.font), {}, {\n                Ubuntu_300Light: require(\"../fonts/Ubuntu_300Light.ttf\"),\n                Ubuntu_300Light_Italic: require(\"../fonts/Ubuntu_300Light_Italic.ttf\"),\n                Ubuntu_400Regular: require(\"../fonts/Ubuntu_400Regular.ttf\"),\n                Ubuntu_400Regular_Italic: require(\"../fonts/Ubuntu_400Regular_Italic.ttf\"),\n                Ubuntu_500Medium: require(\"../fonts/Ubuntu_500Medium.ttf\"),\n                Ubuntu_500Medium_Italic: require(\"../fonts/Ubuntu_500Medium_Italic.ttf\"),\n                Ubuntu_700Bold: require(\"../fonts/Ubuntu_700Bold.ttf\"),\n                Ubuntu_700Bold_Italic: require(\"../fonts/Ubuntu_700Bold_Italic.ttf\")\n              }, fonts))]));\n            case 3:\n              _context.next = 8;\n              break;\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n              console.warn(_context.t0);\n            case 8:\n              _context.prev = 8;\n              setLoadingComplete(true);\n              return _context.finish(8);\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 5, 8, 11]], Promise);\n    }\n    loadResourcesAndDataAsync();\n  }, []);\n  return isLoadingComplete;\n}","map":{"version":3,"names":["React","Ionicons","Font","Asset","useCachedResources","images","fonts","useState","isLoadingComplete","setLoadingComplete","useEffect","loadResourcesAndDataAsync","Promise","all","loadAsync","font","Ubuntu_300Light","require","Ubuntu_300Light_Italic","Ubuntu_400Regular","Ubuntu_400Regular_Italic","Ubuntu_500Medium","Ubuntu_500Medium_Italic","Ubuntu_700Bold","Ubuntu_700Bold_Italic","console","warn"],"sources":["C:/Users/Usuario/OneDrive/Área de Trabalho/SOS-LAR/node_modules/react-native-rapi-ui/hooks/useCachedResources.ts"],"sourcesContent":["import * as React from 'react';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport * as Font from 'expo-font';\r\n\r\nimport { Asset } from 'expo-asset';\r\n\r\nexport default function useCachedResources(\r\n\timages?: Array<any> | null,\r\n\tfonts?: any\r\n) {\r\n\tconst [isLoadingComplete, setLoadingComplete] = React.useState(false);\r\n\r\n\t// Load any resources or data that we need prior to rendering the app\r\n\tReact.useEffect(() => {\r\n\t\tasync function loadResourcesAndDataAsync() {\r\n\t\t\ttry {\r\n\t\t\t\t// Load fonts\r\n\t\t\t\tawait Promise.all([\r\n\t\t\t\t\timages && Asset.loadAsync(images),\r\n\t\t\t\t\tFont.loadAsync({\r\n\t\t\t\t\t\t...Ionicons.font,\r\n\t\t\t\t\t\tUbuntu_300Light: require('../fonts/Ubuntu_300Light.ttf'),\r\n\t\t\t\t\t\tUbuntu_300Light_Italic: require('../fonts/Ubuntu_300Light_Italic.ttf'),\r\n\t\t\t\t\t\tUbuntu_400Regular: require('../fonts/Ubuntu_400Regular.ttf'),\r\n\t\t\t\t\t\tUbuntu_400Regular_Italic: require('../fonts/Ubuntu_400Regular_Italic.ttf'),\r\n\t\t\t\t\t\tUbuntu_500Medium: require('../fonts/Ubuntu_500Medium.ttf'),\r\n\t\t\t\t\t\tUbuntu_500Medium_Italic: require('../fonts/Ubuntu_500Medium_Italic.ttf'),\r\n\t\t\t\t\t\tUbuntu_700Bold: require('../fonts/Ubuntu_700Bold.ttf'),\r\n\t\t\t\t\t\tUbuntu_700Bold_Italic: require('../fonts/Ubuntu_700Bold_Italic.ttf'),\r\n\t\t\t\t\t\t...fonts,\r\n\t\t\t\t\t}),\r\n\t\t\t\t]);\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// We might want to provide this error information to an error reporting service\r\n\t\t\t\tconsole.warn(e);\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoadingComplete(true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tloadResourcesAndDataAsync();\r\n\t}, []);\r\n\r\n\treturn isLoadingComplete;\r\n}\r\n"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,OAAO,KAAKC,IAAI,MAAM,WAAW;AAEjC,SAASC,KAAK,QAAQ,YAAY;AAElC,eAAe,SAASC,kBAAkB,CACzCC,MAA0B,EAC1BC,KAAW,EACV;EACD,sBAAgDN,KAAK,CAACO,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA9DC,iBAAiB;IAAEC,kBAAkB;;EAG5CT,KAAK,CAACU,SAAS,CAAC,YAAM;IACrB,SAAeC,yBAAyB;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,iCAGhCC,OAAO,CAACC,GAAG,CAAC,CACjBR,MAAM,IAAIF,KAAK,CAACW,SAAS,CAACT,MAAM,CAAC,EACjCH,IAAI,CAACY,SAAS,iCACVb,QAAQ,CAACc,IAAI;gBAChBC,eAAe,EAAEC,OAAO,gCAAgC;gBACxDC,sBAAsB,EAAED,OAAO,uCAAuC;gBACtEE,iBAAiB,EAAEF,OAAO,kCAAkC;gBAC5DG,wBAAwB,EAAEH,OAAO,yCAAyC;gBAC1EI,gBAAgB,EAAEJ,OAAO,iCAAiC;gBAC1DK,uBAAuB,EAAEL,OAAO,wCAAwC;gBACxEM,cAAc,EAAEN,OAAO,+BAA+B;gBACtDO,qBAAqB,EAAEP,OAAO;cAAsC,GACjEX,KAAK,EACP,CACF,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAGFmB,OAAO,CAACC,IAAI,aAAG;YAAC;cAAA;cAEhBjB,kBAAkB,CAAC,IAAI,CAAC;cAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;IAI3BE,yBAAyB,EAAE;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOH,iBAAiB;AACzB"},"metadata":{},"sourceType":"module"}