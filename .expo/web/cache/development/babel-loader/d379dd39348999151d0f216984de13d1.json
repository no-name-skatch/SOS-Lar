{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { findFocusedRoute, getActionFromState as getActionFromStateDefault, getPathFromState as getPathFromStateDefault, getStateFromPath as getStateFromPathDefault } from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport ServerContext from \"./ServerContext\";\nvar createMemoryHistory = function createMemoryHistory() {\n  var index = 0;\n  var items = [];\n\n  var pending = [];\n  var interrupt = function interrupt() {\n    pending.forEach(function (it) {\n      var cb = it.cb;\n      it.cb = function () {\n        return cb(true);\n      };\n    });\n  };\n  var history = {\n    get index() {\n      var _window$history$state;\n\n      var id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n      if (id) {\n        var _index = items.findIndex(function (item) {\n          return item.id === id;\n        });\n        return _index > -1 ? _index : 0;\n      }\n      return 0;\n    },\n    get: function get(index) {\n      return items[index];\n    },\n    backIndex: function backIndex(_ref) {\n      var path = _ref.path;\n      for (var i = index - 1; i >= 0; i--) {\n        var item = items[i];\n        if (item.path === path) {\n          return i;\n        }\n      }\n      return -1;\n    },\n    push: function push(_ref2) {\n      var path = _ref2.path,\n        state = _ref2.state;\n      interrupt();\n      var id = nanoid();\n\n      items = items.slice(0, index + 1);\n      items.push({\n        path: path,\n        state: state,\n        id: id\n      });\n      index = items.length - 1;\n\n      window.history.pushState({\n        id: id\n      }, '', path);\n    },\n    replace: function replace(_ref3) {\n      var path = _ref3.path,\n        state = _ref3.state;\n      var _window$history$state2, _window$history$state3;\n      interrupt();\n      var id = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : nanoid();\n      if (!items.length || items.findIndex(function (item) {\n        return item.id === id;\n      }) < 0) {\n        items = [{\n          path: path,\n          state: state,\n          id: id\n        }];\n      } else {\n        items[index] = {\n          path: path,\n          state: state,\n          id: id\n        };\n      }\n      window.history.replaceState({\n        id: id\n      }, '', path);\n    },\n    go: function go(n) {\n      interrupt();\n      if (n > 0) {\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        n = index + n < 0 ? -index : n;\n      }\n      if (n === 0) {\n        return;\n      }\n      index += n;\n\n      return new Promise(function (resolve, reject) {\n        var done = function done(interrupted) {\n          clearTimeout(timer);\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          var title = window.document.title;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n        pending.push({\n          ref: done,\n          cb: done\n        });\n\n        var timer = setTimeout(function () {\n          var index = pending.findIndex(function (it) {\n            return it.ref === done;\n          });\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n        var onPopState = function onPopState() {\n          var _window$history$state4;\n          var id = (_window$history$state4 = window.history.state) === null || _window$history$state4 === void 0 ? void 0 : _window$history$state4.id;\n          var currentIndex = items.findIndex(function (item) {\n            return item.id === id;\n          });\n\n          index = Math.max(currentIndex, 0);\n          var last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n    listen: function listen(listener) {\n      var onPopState = function onPopState() {\n        if (pending.length) {\n          return;\n        }\n        listener();\n      };\n      window.addEventListener('popstate', onPopState);\n      return function () {\n        return window.removeEventListener('popstate', onPopState);\n      };\n    }\n  };\n  return history;\n};\n\nvar findMatchingState = function findMatchingState(a, b) {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  var aHistoryLength = a.history ? a.history.length : a.routes.length;\n  var bHistoryLength = b.history ? b.history.length : b.routes.length;\n  var aRoute = a.routes[a.index];\n  var bRoute = b.routes[b.index];\n  var aChildState = aRoute.state;\n  var bChildState = bRoute.state;\n\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n  return findMatchingState(aChildState, bChildState);\n};\n\nvar series = function series(cb) {\n  var handling = false;\n  var queue = [];\n  var callback = function callback() {\n    var last;\n    return _regeneratorRuntime.async(function callback$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            if (!handling) {\n              _context.next = 4;\n              break;\n            }\n            queue.unshift(callback);\n            return _context.abrupt(\"return\");\n          case 4:\n            handling = true;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(cb());\n          case 7:\n            _context.prev = 7;\n            handling = false;\n            if (queue.length) {\n              last = queue.pop();\n              last === null || last === void 0 ? void 0 : last();\n            }\n            return _context.finish(7);\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0,, 7, 11]], Promise);\n  };\n  return callback;\n};\nvar linkingHandlers = [];\nexport default function useLinking(ref, _ref4) {\n  var independent = _ref4.independent,\n    _ref4$enabled = _ref4.enabled,\n    enabled = _ref4$enabled === void 0 ? true : _ref4$enabled,\n    config = _ref4.config,\n    _ref4$getStateFromPat = _ref4.getStateFromPath,\n    getStateFromPath = _ref4$getStateFromPat === void 0 ? getStateFromPathDefault : _ref4$getStateFromPat,\n    _ref4$getPathFromStat = _ref4.getPathFromState,\n    getPathFromState = _ref4$getPathFromStat === void 0 ? getPathFromStateDefault : _ref4$getPathFromStat,\n    _ref4$getActionFromSt = _ref4.getActionFromState,\n    getActionFromState = _ref4$getActionFromSt === void 0 ? getActionFromStateDefault : _ref4$getActionFromSt;\n  React.useEffect(function () {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n    if (independent) {\n      return undefined;\n    }\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n    var handler = Symbol();\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n    return function () {\n      var index = linkingHandlers.indexOf(handler);\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n  var _React$useState = React.useState(createMemoryHistory),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    history = _React$useState2[0];\n\n  var enabledRef = React.useRef(enabled);\n  var configRef = React.useRef(config);\n  var getStateFromPathRef = React.useRef(getStateFromPath);\n  var getPathFromStateRef = React.useRef(getPathFromState);\n  var getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(function () {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  var server = React.useContext(ServerContext);\n  var getInitialState = React.useCallback(function () {\n    var value;\n    if (enabledRef.current) {\n      var _server$location;\n      var _location = (_server$location = server === null || server === void 0 ? void 0 : server.location) !== null && _server$location !== void 0 ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n      var path = _location ? _location.pathname + _location.search : undefined;\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n    var thenable = {\n      then: function then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch: function _catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n  }, []);\n  var previousIndexRef = React.useRef(undefined);\n  var previousStateRef = React.useRef(undefined);\n  var pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(function () {\n    previousIndexRef.current = history.index;\n    return history.listen(function () {\n      var _previousIndexRef$cur;\n      var navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      var path = location.pathname + location.search;\n      var index = history.index;\n      var previousIndex = (_previousIndexRef$cur = previousIndexRef.current) !== null && _previousIndexRef$cur !== void 0 ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      var record = history.get(index);\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n      var state = getStateFromPathRef.current(path, configRef.current);\n\n      if (state) {\n        var rootState = navigation.getRootState();\n        if (state.routes.some(function (r) {\n          return !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name));\n        })) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n        if (index > previousIndex) {\n          var action = getActionFromStateRef.current(state, configRef.current);\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              console.warn(\"An error occurred when trying to handle the link '\" + path + \"': \" + e.message);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(function () {\n    var _ref$current;\n    if (!enabled) {\n      return;\n    }\n    if (ref.current) {\n      var state = ref.current.getRootState();\n      if (state) {\n        var _route$path;\n        var route = findFocusedRoute(state);\n        var path = (_route$path = route === null || route === void 0 ? void 0 : route.path) !== null && _route$path !== void 0 ? _route$path : getPathFromStateRef.current(state, configRef.current);\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n        history.replace({\n          path: path,\n          state: state\n        });\n      }\n    }\n    var onStateChange = function onStateChange() {\n      var _route$path2, navigation, previousState, state, pendingPath, route, path, _findMatchingState, _findMatchingState2, previousFocusedState, focusedState, historyDelta, nextIndex, currentIndex;\n      return _regeneratorRuntime.async(function onStateChange$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              navigation = ref.current;\n              if (!(!navigation || !enabled)) {\n                _context2.next = 3;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 3:\n              previousState = previousStateRef.current;\n              state = navigation.getRootState();\n              pendingPath = pendingPopStatePathRef.current;\n              route = findFocusedRoute(state);\n              path = (_route$path2 = route === null || route === void 0 ? void 0 : route.path) !== null && _route$path2 !== void 0 ? _route$path2 : getPathFromStateRef.current(state, configRef.current);\n              previousStateRef.current = state;\n              pendingPopStatePathRef.current = undefined;\n              _findMatchingState = findMatchingState(previousState, state), _findMatchingState2 = _slicedToArray(_findMatchingState, 2), previousFocusedState = _findMatchingState2[0], focusedState = _findMatchingState2[1];\n              if (!(previousFocusedState && focusedState &&\n              path !== pendingPath)) {\n                _context2.next = 38;\n                break;\n              }\n              historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n              if (!(historyDelta > 0)) {\n                _context2.next = 17;\n                break;\n              }\n              history.push({\n                path: path,\n                state: state\n              });\n              _context2.next = 36;\n              break;\n            case 17:\n              if (!(historyDelta < 0)) {\n                _context2.next = 35;\n                break;\n              }\n              nextIndex = history.backIndex({\n                path: path\n              });\n              currentIndex = history.index;\n              _context2.prev = 20;\n              if (!(nextIndex !== -1 && nextIndex < currentIndex)) {\n                _context2.next = 26;\n                break;\n              }\n              _context2.next = 24;\n              return _regeneratorRuntime.awrap(history.go(nextIndex - currentIndex));\n            case 24:\n              _context2.next = 28;\n              break;\n            case 26:\n              _context2.next = 28;\n              return _regeneratorRuntime.awrap(history.go(historyDelta));\n            case 28:\n\n              history.replace({\n                path: path,\n                state: state\n              });\n              _context2.next = 33;\n              break;\n            case 31:\n              _context2.prev = 31;\n              _context2.t0 = _context2[\"catch\"](20);\n            case 33:\n              _context2.next = 36;\n              break;\n            case 35:\n              history.replace({\n                path: path,\n                state: state\n              });\n            case 36:\n              _context2.next = 39;\n              break;\n            case 38:\n              history.replace({\n                path: path,\n                state: state\n              });\n            case 39:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[20, 31]], Promise);\n    };\n\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState: getInitialState\n  };\n}","map":{"version":3,"mappings":"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","names":["findFocusedRoute","getActionFromState","getActionFromStateDefault","getPathFromState","getPathFromStateDefault","getStateFromPath","getStateFromPathDefault","nanoid","React","ServerContext","createMemoryHistory","index","items","pending","interrupt","forEach","it","cb","history","id","window","state","_window$history$state","findIndex","item","get","backIndex","path","i","push","slice","length","pushState","replace","_window$history$state3","replaceState","go","n","Math","min","Promise","resolve","reject","done","interrupted","clearTimeout","timer","Error","title","document","ref","setTimeout","splice","onPopState","_window$history$state4","currentIndex","max","last","pop","removeEventListener","addEventListener","listen","listener","findMatchingState","a","b","undefined","key","aHistoryLength","routes","bHistoryLength","aRoute","bRoute","aChildState","bChildState","series","handling","queue","callback","unshift","linkingHandlers","useLinking","independent","enabled","config","useEffect","process","env","NODE_ENV","console","error","join","trim","handler","Symbol","indexOf","useState","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","server","useContext","getInitialState","useCallback","value","location","pathname","search","thenable","then","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","navigation","previousIndex","record","resetRoot","rootState","getRootState","some","r","routeNames","includes","name","warn","action","dispatch","e","message","route","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","_ref$current","addListener"],"sources":["useLinking.tsx"],"sourcesContent":["import {\n  findFocusedRoute,\n  getActionFromState as getActionFromStateDefault,\n  getPathFromState as getPathFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\n\nimport ServerContext from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      if (!items.length || items.findIndex((item) => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        items = [{ path, state, id }];\n      } else {\n        items[index] = { path, state, id };\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      if (n > 0) {\n        // We shouldn't go forward more than available index\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        // We shouldn't go back more than the 0 index\n        // Otherwise we'll exit the page\n        n = index + n < 0 ? -index : n;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      index += n;\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise<void>((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex((it) => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const id = window.history.state?.id;\n          const currentIndex = items.findIndex((item) => item.id === id);\n\n          // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n          index = Math.max(currentIndex, 0);\n\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n};\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet linkingHandlers: Symbol[] = [];\n\ntype Options = LinkingOptions<ParamListBase> & {\n  independent?: boolean;\n};\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    independent,\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(\n            state,\n            configRef.current\n          );\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${e.message}`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path =\n          route?.path ?? getPathFromStateRef.current(state, configRef.current);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path =\n        route?.path ?? getPathFromStateRef.current(state, configRef.current);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}