{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { supabase } from \"../../initSupabase\";\nimport { Layout, Text, TextInput, Button, useTheme, themeColor } from \"react-native-rapi-ui\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function (_ref) {\n  var navigation = _ref.navigation;\n  var _useTheme = useTheme(),\n    isDarkmode = _useTheme.isDarkmode,\n    setTheme = _useTheme.setTheme;\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    loading = _useState6[0],\n    setLoading = _useState6[1];\n  function register() {\n    var _await$supabase$auth$, user, error;\n    return _regeneratorRuntime.async(function register$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(supabase.auth.signUp({\n              email: email,\n              password: password\n            }));\n          case 3:\n            _await$supabase$auth$ = _context.sent;\n            user = _await$supabase$auth$.user;\n            error = _await$supabase$auth$.error;\n            if (!error && !user) {\n              setLoading(false);\n              alert(\"Check your email for the login link!\");\n            }\n            if (error) {\n              setLoading(false);\n              alert(error.message);\n            }\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n  return _jsx(KeyboardAvoidingView, {\n    behavior: \"height\",\n    enabled: true,\n    style: {\n      flex: 1\n    },\n    children: _jsx(Layout, {\n      children: _jsxs(ScrollView, {\n        contentContainerStyle: {\n          flexGrow: 1\n        },\n        children: [_jsx(View, {\n          style: {\n            flex: 1,\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundColor: isDarkmode ? \"#17171E\" : themeColor.white100\n          },\n          children: _jsx(Image, {\n            resizeMode: \"contain\",\n            style: {\n              height: 220,\n              width: 220\n            },\n            source: require(\"../../../assets/images/logo.png\")\n          })\n        }), _jsxs(View, {\n          style: {\n            flex: 3,\n            paddingHorizontal: 20,\n            paddingBottom: 20,\n            backgroundColor: isDarkmode ? themeColor.dark : themeColor.white\n          },\n          children: [_jsx(Text, {\n            fontWeight: \"bold\",\n            size: \"h3\",\n            style: {\n              alignSelf: \"center\",\n              padding: 30\n            },\n            children: \"Register\"\n          }), _jsx(Text, {\n            children: \"Email\"\n          }), _jsx(TextInput, {\n            containerStyle: {\n              marginTop: 15\n            },\n            placeholder: \"Enter your email\",\n            value: email,\n            autoCapitalize: \"none\",\n            autoCompleteType: \"off\",\n            autoCorrect: false,\n            keyboardType: \"email-address\",\n            onChangeText: function onChangeText(text) {\n              return setEmail(text);\n            }\n          }), _jsx(Text, {\n            style: {\n              marginTop: 15\n            },\n            children: \"Password\"\n          }), _jsx(TextInput, {\n            containerStyle: {\n              marginTop: 15\n            },\n            placeholder: \"Enter your password\",\n            value: password,\n            autoCapitalize: \"none\",\n            autoCompleteType: \"off\",\n            autoCorrect: false,\n            secureTextEntry: true,\n            onChangeText: function onChangeText(text) {\n              return setPassword(text);\n            }\n          }), _jsx(Button, {\n            text: loading ? \"Loading\" : \"Create an account\",\n            onPress: function onPress() {\n              register();\n            },\n            style: {\n              marginTop: 20\n            },\n            disabled: loading\n          }), _jsxs(View, {\n            style: {\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              marginTop: 15,\n              justifyContent: \"center\"\n            },\n            children: [_jsx(Text, {\n              size: \"md\",\n              children: \"Already have an account?\"\n            }), _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                navigation.navigate(\"Login\");\n              },\n              children: _jsx(Text, {\n                size: \"md\",\n                fontWeight: \"bold\",\n                style: {\n                  marginLeft: 5\n                },\n                children: \"Login here\"\n              })\n            })]\n          }), _jsx(View, {\n            style: {\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              marginTop: 30,\n              justifyContent: \"center\"\n            },\n            children: _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                isDarkmode ? setTheme(\"light\") : setTheme(\"dark\");\n              },\n              children: _jsx(Text, {\n                size: \"md\",\n                fontWeight: \"bold\",\n                style: {\n                  marginLeft: 5\n                },\n                children: isDarkmode ? \"‚òÄÔ∏è light theme\" : \"üåë dark theme\"\n              })\n            })\n          })]\n        })]\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","useState","supabase","Layout","Text","TextInput","Button","useTheme","themeColor","navigation","isDarkmode","setTheme","email","setEmail","password","setPassword","loading","setLoading","register","auth","signUp","user","error","alert","message","flex","flexGrow","justifyContent","alignItems","backgroundColor","white100","height","width","require","paddingHorizontal","paddingBottom","dark","white","alignSelf","padding","marginTop","text","flexDirection","navigate","marginLeft"],"sources":["C:/Users/Usuario/OneDrive/√Årea de Trabalho/SOS-LAR/src/screens/auth/Register.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport {\n  ScrollView,\n  TouchableOpacity,\n  View,\n  KeyboardAvoidingView,\n  Image,\n} from \"react-native\";\nimport { supabase } from \"../../initSupabase\";\nimport { AuthStackParamList } from \"../../types/navigation\";\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport {\n  Layout,\n  Text,\n  TextInput,\n  Button,\n  useTheme,\n  themeColor,\n} from \"react-native-rapi-ui\";\n\nexport default function ({\n  navigation,\n}: NativeStackScreenProps<AuthStackParamList, \"Register\">) {\n  const { isDarkmode, setTheme } = useTheme();\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n\n  async function register() {\n    setLoading(true);\n    const { user, error } = await supabase.auth.signUp({\n      email: email,\n      password: password,\n    });\n    if (!error && !user) {\n      setLoading(false);\n      alert(\"Check your email for the login link!\");\n    }\n    if (error) {\n      setLoading(false);\n      alert(error.message);\n    }\n  }\n  return (\n    <KeyboardAvoidingView behavior=\"height\" enabled style={{ flex: 1 }}>\n      <Layout>\n        <ScrollView\n          contentContainerStyle={{\n            flexGrow: 1,\n          }}\n        >\n          <View\n            style={{\n              flex: 1,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              backgroundColor: isDarkmode ? \"#17171E\" : themeColor.white100,\n            }}\n          >\n            <Image\n              resizeMode=\"contain\"\n              style={{\n                height: 220,\n                width: 220,\n              }}\n              source={require(\"../../../assets/images/logo.png\")}\n            />\n          </View>\n          <View\n            style={{\n              flex: 3,\n              paddingHorizontal: 20,\n              paddingBottom: 20,\n              backgroundColor: isDarkmode ? themeColor.dark : themeColor.white,\n            }}\n          >\n            <Text\n              fontWeight=\"bold\"\n              size=\"h3\"\n              style={{\n                alignSelf: \"center\",\n                padding: 30,\n              }}\n            >\n              Register\n            </Text>\n            <Text>Email</Text>\n            <TextInput\n              containerStyle={{ marginTop: 15 }}\n              placeholder=\"Enter your email\"\n              value={email}\n              autoCapitalize=\"none\"\n              autoCompleteType=\"off\"\n              autoCorrect={false}\n              keyboardType=\"email-address\"\n              onChangeText={(text) => setEmail(text)}\n            />\n\n            <Text style={{ marginTop: 15 }}>Password</Text>\n            <TextInput\n              containerStyle={{ marginTop: 15 }}\n              placeholder=\"Enter your password\"\n              value={password}\n              autoCapitalize=\"none\"\n              autoCompleteType=\"off\"\n              autoCorrect={false}\n              secureTextEntry={true}\n              onChangeText={(text) => setPassword(text)}\n            />\n            <Button\n              text={loading ? \"Loading\" : \"Create an account\"}\n              onPress={() => {\n                register();\n              }}\n              style={{\n                marginTop: 20,\n              }}\n              disabled={loading}\n            />\n\n            <View\n              style={{\n                flexDirection: \"row\",\n                alignItems: \"center\",\n                marginTop: 15,\n                justifyContent: \"center\",\n              }}\n            >\n              <Text size=\"md\">Already have an account?</Text>\n              <TouchableOpacity\n                onPress={() => {\n                  navigation.navigate(\"Login\");\n                }}\n              >\n                <Text\n                  size=\"md\"\n                  fontWeight=\"bold\"\n                  style={{\n                    marginLeft: 5,\n                  }}\n                >\n                  Login here\n                </Text>\n              </TouchableOpacity>\n            </View>\n            <View\n              style={{\n                flexDirection: \"row\",\n                alignItems: \"center\",\n                marginTop: 30,\n                justifyContent: \"center\",\n              }}\n            >\n              <TouchableOpacity\n                onPress={() => {\n                  isDarkmode ? setTheme(\"light\") : setTheme(\"dark\");\n                }}\n              >\n                <Text\n                  size=\"md\"\n                  fontWeight=\"bold\"\n                  style={{\n                    marginLeft: 5,\n                  }}\n                >\n                  {isDarkmode ? \"‚òÄÔ∏è light theme\" : \"üåë dark theme\"}\n                </Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </ScrollView>\n      </Layout>\n    </KeyboardAvoidingView>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}