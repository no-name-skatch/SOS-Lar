{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Layout, Button, Text, TopNav, useTheme, themeColor } from \"react-native-rapi-ui\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { supabase } from \"../initSupabase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function (_ref) {\n  var navigation = _ref.navigation;\n  var _useTheme = useTheme(),\n    isDarkmode = _useTheme.isDarkmode,\n    setTheme = _useTheme.setTheme;\n  return _jsxs(Layout, {\n    children: [_jsx(TopNav, {\n      middleContent: \"Home\",\n      rightContent: _jsx(Ionicons, {\n        name: isDarkmode ? \"sunny\" : \"moon\",\n        size: 20,\n        color: isDarkmode ? themeColor.white100 : themeColor.dark\n      }),\n      rightAction: function rightAction() {\n        if (isDarkmode) {\n          setTheme(\"light\");\n        } else {\n          setTheme(\"dark\");\n        }\n      }\n    }), _jsxs(View, {\n      style: {\n        flex: 1,\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      children: [_jsx(Text, {\n        children: \"Pedreiros\"\n      }), _jsx(Button, {\n        status: \"danger\",\n        text: \"Logout\",\n        onPress: function _callee() {\n          var _await$supabase$auth$, error;\n          return _regeneratorRuntime.async(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return _regeneratorRuntime.awrap(supabase.auth.signOut());\n                case 2:\n                  _await$supabase$auth$ = _context.sent;\n                  error = _await$supabase$auth$.error;\n                  if (!error) {\n                    alert(\"Signed out!\");\n                  }\n                  if (error) {\n                    alert(error.message);\n                  }\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        },\n        style: {\n          marginTop: 10\n        }\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","Layout","Button","Text","TopNav","useTheme","themeColor","Ionicons","supabase","navigation","isDarkmode","setTheme","white100","dark","flex","alignItems","justifyContent","auth","signOut","error","alert","message","marginTop"],"sources":["C:/Users/Usuario/OneDrive/√Årea de Trabalho/SOS-LAR/src/screens/Profile.tsx"],"sourcesContent":["import React from \"react\";\nimport { View } from \"react-native\";\nimport { MainStackParamList } from \"../types/navigation\";\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport {\n  Layout,\n  Button,\n  Text,\n  TopNav,\n  Section,\n  SectionContent,\n  useTheme,\n  themeColor,\n} from \"react-native-rapi-ui\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { supabase } from \"../initSupabase\";\n\nexport default function ({\n  navigation,\n}: NativeStackScreenProps<MainStackParamList, \"MainTabs\">) {\n  const { isDarkmode, setTheme } = useTheme();\n  return (\n    <Layout>\n      <TopNav\n        middleContent=\"Home\"\n        rightContent={\n          <Ionicons\n            name={isDarkmode ? \"sunny\" : \"moon\"}\n            size={20}\n            color={isDarkmode ? themeColor.white100 : themeColor.dark}\n          />\n        }\n        rightAction={() => {\n          if (isDarkmode) {\n            setTheme(\"light\");\n          } else {\n            setTheme(\"dark\");\n          }\n        }}\n      />\n      <View\n        style={{\n          flex: 1,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Text>Pedreiros</Text>\n        \n        <Button\n              status=\"danger\"\n              text=\"Logout\"\n              onPress={async () => {\n                const { error } = await supabase.auth.signOut();\n                if (!error) {\n                  alert(\"Signed out!\");\n                }\n                if (error) {\n                  alert(error.message);\n                }\n              }}\n              style={{\n                marginTop: 10,\n              }}\n            />\n      </View>\n    </Layout>\n  );\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC;AAI1B,SACEC,MAAM,EACNC,MAAM,EACNC,IAAI,EACJC,MAAM,EAGNC,QAAQ,EACRC,UAAU,QACL,sBAAsB;AAC7B,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,QAAQ;AAA0B;AAAA;AAE3C,eAAe,gBAE4C;EAAA,IADzDC,UAAU,QAAVA,UAAU;EAEV,gBAAiCJ,QAAQ,EAAE;IAAnCK,UAAU,aAAVA,UAAU;IAAEC,QAAQ,aAARA,QAAQ;EAC5B,OACE,MAAC,MAAM;IAAA,WACL,KAAC,MAAM;MACL,aAAa,EAAC,MAAM;MACpB,YAAY,EACV,KAAC,QAAQ;QACP,IAAI,EAAED,UAAU,GAAG,OAAO,GAAG,MAAO;QACpC,IAAI,EAAE,EAAG;QACT,KAAK,EAAEA,UAAU,GAAGJ,UAAU,CAACM,QAAQ,GAAGN,UAAU,CAACO;MAAK,EAE7D;MACD,WAAW,EAAE,uBAAM;QACjB,IAAIH,UAAU,EAAE;UACdC,QAAQ,CAAC,OAAO,CAAC;QACnB,CAAC,MAAM;UACLA,QAAQ,CAAC,MAAM,CAAC;QAClB;MACF;IAAE,EACF,EACF,MAAC,IAAI;MACH,KAAK,EAAE;QACLG,IAAI,EAAE,CAAC;QACPC,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE;MAClB,CAAE;MAAA,WAEF,KAAC,IAAI;QAAA;MAAA,EAAiB,EAEtB,KAAC,MAAM;QACD,MAAM,EAAC,QAAQ;QACf,IAAI,EAAC,QAAQ;QACb,OAAO,EAAE;UAAA;UAAA;YAAA;cAAA;gBAAA;kBAAA;kBAAA,iCACiBR,QAAQ,CAACS,IAAI,CAACC,OAAO,EAAE;gBAAA;kBAAA;kBAAvCC,KAAK,yBAALA,KAAK;kBACb,IAAI,CAACA,KAAK,EAAE;oBACVC,KAAK,CAAC,aAAa,CAAC;kBACtB;kBACA,IAAID,KAAK,EAAE;oBACTC,KAAK,CAACD,KAAK,CAACE,OAAO,CAAC;kBACtB;gBAAC;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA,CACD;QACF,KAAK,EAAE;UACLC,SAAS,EAAE;QACb;MAAE,EACF;IAAA,EACD;EAAA,EACA;AAEb"},"metadata":{},"sourceType":"module"}